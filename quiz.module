<?php

/**
 * @file
 * Module for the Quiz Entity - a starting point to create your own Entity
 * and associated administration interface
 */



function quiz_entity_info() {
  $return = array(
    // quiz attempt entity to hold a quiz attempt by a user.
    'quiz_attempt' => array(
      'label' => t('Quiz Attempt'),
      'entity class' => 'QuizAttempt',
      'controller class' => 'QuizAttemptController',
      'base table' => 'quiz_attempt',
      'fieldable' => FALSE,
      // 'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'quiz_attempt_id',
        'user' => 'user',
        'quiz' => 'quiz',
      ),
      'access callback' => 'quiz_attempt_access',
      'module' => 'question',
    ),
  );
  return $return;
}


function quiz_attempt_access($op, $type = NULL, $account = NULL) {
  return user_access('take quiz', $account);
}


/**
 * Fetch a question object. Make sure that the wildcard you choose
 * in the question entity definition fits the function name here.
 *
 * @param $question_id
 *   Integer specifying the question id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $question object or FALSE if it cannot be loaded.
 *
 * @see question_load_multiple()
 */
function quiz_attempt_load($quiz_attempt_id, $reset = FALSE) {
  $quiz_attempts = quiz_attempt_load_multiple(array($quiz_attempt_id), array(), $reset);
  return reset($quiz_attempts);
}


/**
 * Load multiple questions based on certain conditions.
 *
 * @param $question_ids
 *   An array of question IDs.
 * @param $conditions
 *   An array of conditions to match against the {question} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of question objects, indexed by question_id.
 *
 * @see entity_load()
 * @see question_load()
 */
function quiz_attempt_load_multiple($quiz_attempts = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('quiz_attempt', $quiz_attempts, $conditions, $reset);
}


/**
 * Deletes a question.
 */
function quiz_attempt_delete(QuizAttempt $quiz_attempt) {
  $quiz_attempt->delete();
}


/**
 * Delete multiple questions.
 *
 * @param $question_ids
 *   An array of question IDs.
 */
function quiz_attempt_delete_multiple(array $quiz_attempts) {
  entity_get_controller('quiz_attempt')->delete($quiz_attempts);
}


/**
 * Create a question object.
 */
function quiz_attempt_create($values = array()) {
  return entity_get_controller('quiz_attempt')->create($values);
}


/**
 * Saves a quiz attempt to the database.
 *
 * @param $question
 *   The question object.
 */
function quiz_attempt_save(QuizAttempt $quiz_attempt) {
  return $quiz_attempt->save();
}


class QuizAttempt extends Entity {

  public $user;
  public $quiz;

  public $start_time;
  public $end_time;

  public function __construct($values = array()) {
    parent::__construct($values, 'quiz_attempt');
  }
}


class QuizAttemptController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function create(array $values = array()) {
    // Add values that are specific to our Question
    $values += array(
      'quiz_attempt_id' => '',
      'is_new' => TRUE,
    );
    $quiz_attempt = parent::create($values);
    return $quiz_attempt;
  }

}

/**
 * Implement hook_entity_info_alter().
 */
function quiz_entity_info_alter(&$entity_info) {
  //TODO: add support for revisions
}
