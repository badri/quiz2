<?php

/**
 * @file
 * Provides a framework for creating and managing question types.
 */


// TODO:
// 1. add admin UI
// 2. views bulk ops interface
/**
 * Implements hook_entity_info().
 */
function question_entity_info() {
  $return = array(
    'question' => array(
      'label' => t('Quiz Question'),
      'controller class' => 'QuestionController',
      'base table' => 'question',
      'entity class' => 'Question',
      'module' => 'question',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'question_id',
        'bundle' => 'type',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => TRUE,
        ),
      ),
      'access callback' => 'question_access',
      'access arguments' => array(
        'user key' => 'uid',
      ),
      // Bundles are defined by the quiz types below
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      // 'creation callback' => 'question_create',
      'admin ui' => array(
        'path' => 'admin/content/questions',
        'file' => 'question.admin.inc',
        'controller class' => 'QuestionUIController',
        'menu wildcard' => '%question',
      ),
    ),
    // The entity that holds information about the entity types
    'question_type' => array(
      'label' => t('Question Type'),
      'entity class' => 'QuestionType',
      'controller class' => 'QuestionTypeController',
      'base table' => 'question_type',
      'fieldable' => FALSE,
      'bundle of' => 'question',
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'name' => 'type',
        'label' => 'label',
      ),
      'access callback' => 'question_type_access',
      'module' => 'question',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/question_types',
        'file' => 'question_type.admin.inc',
        'controller class' => 'QuestionTypeUIController',
      ),
    ),
  );
  return $return;
}

/**
 * Implement hook_theme().
 */
function question_theme() {
  return array(
    'question_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'question.admin.inc',
    ),
    'question' => array(
      'render element' => 'elements',
      'template' => 'theme/question',
    ),
   'question_sample_data' => array(
      'variables' => array('question_sample_data', 'question' => NULL),
      'template' => 'theme/question-sample-data',
    ),


  );
}

/**
 * Determines whether the given user has access to a question.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $question
 *   Optionally a question or a question type to check access for. If nothing is
 *   given, access for all questions is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function question_access($op, $question = NULL, $account = NULL) {
  if (user_access('administer questions', $account)) {
    return TRUE;
  }
  if (isset($question) && $type_name = $question->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name question", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function question_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer question types', $account);
}

/**
 * Gets an array of all question types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return QuestionType[]
 *   Depending whether $type isset, an array of question types or a single one.
 */
function question_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our question entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('question_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a question type by string.
 *
 * @param $type
 *   The machine-readable name of a question type to load.
 * @return
 *   A question type array or FALSE if $type does not exist.
 */
function question_type_load($type) {
  return question_get_types($type);
}


/**
 * Fetch a question object. Make sure that the wildcard you choose
 * in the question entity definition fits the function name here.
 *
 * @param $question_id
 *   Integer specifying the question id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $question object or FALSE if it cannot be loaded.
 *
 * @see question_load_multiple()
 */
function question_load($question_id, $reset = FALSE) {
  $questions = question_load_multiple(array($question_id), array(), $reset);
  return reset($questions);
}


/**
 * Load multiple questions based on certain conditions.
 *
 * @param $question_ids
 *   An array of question IDs.
 * @param $conditions
 *   An array of conditions to match against the {question} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of question objects, indexed by question_id.
 *
 * @see entity_load()
 * @see question_load()
 */
function question_load_multiple($question_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('question', $question_ids, $conditions, $reset);
}


/**
 * Deletes a question.
 */
function question_delete(Question $question) {
  $question->delete();
}


/**
 * Delete multiple questions.
 *
 * @param $question_ids
 *   An array of question IDs.
 */
function question_delete_multiple(array $question_ids) {
  entity_get_controller('question')->delete($question_ids);
}


/**
 * Create a question object.
 */
function question_create($values = array()) {
  return entity_get_controller('question')->create($values);
}


/**
 * Saves a question to the database.
 *
 * @param $question
 *   The question object.
 */
function question_save(Question $question) {
  return $question->save();
}


/**
 * Saves a question type to the db.
 */
function question_type_save(QuestionType $type) {
  $type->save();
}


/**
 * Deletes a question type from the db.
 */
function question_type_delete(QuestionType $type) {
  $type->delete();
}


/**
 * URI callback for questions
 */
function question_uri(Question $question){
  return array(
    'path' => 'question/' . $question->question_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function question_page_title(Question $question){
  return $question->name;
}


/**
 * Sets up content to show an individual question
 * @todo - get rid of drupal_set_title();
 */
function question_page_view($question, $view_mode = 'full') {
  $controller = entity_get_controller('question');
  $content = $controller->view(array($question->question_id => $question));
  drupal_set_title($question->name);
  return $content;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function question_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/questions/add' on 'admin/structure/questions'.
  if ($root_path == 'admin/content/questions') {
    $item = menu_get_item('admin/content/questions/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * The class used for question type entities
 */
class QuestionType extends Entity {

  public $type;
  public $label;

  public function __construct($values = array()) {
    parent::__construct($values, 'question_type');
  }

}

/**
 * The Controller for Question type entities
 */
class QuestionTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

   /**
   * Create a question type - we first set up the values that are specific
   * to our question type schema but then also go through the EntityAPIController
   * function.
   *
   * @param $type
   *   The machine-readable type of the question.
   *
   * @return
   *   A question type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Question
    $values += array(
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $question_type = parent::create($values);
    return $question_type;
  }

}


class QuestionController extends EntityAPIController {
  /**
   * Overrides EntityAPIController::query().
   */
  public function query($ids, $conditions, $revision_id = FALSE) {
    $query = $this->buildQuery($ids, $conditions, $revision_id);
    $result = $query->execute();
    $result->setFetchMode(PDO::FETCH_ASSOC);

    // Build the resulting objects ourselves, since the standard PDO ways of
    // doing that are completely useless.
    $objects = array();
    foreach ($result as $row) {
      $row['is_new'] = FALSE;
      $objects[] = $this->create($row);
    }
    return $objects;
  }

  /**
   * Overrides EntityAPIController::create().
   */
  public function create(array $values = array()) {
    if (!isset($values[$this->entityInfo['entity keys']['bundle']])) {
      throw new Exception(t('No bundle provided to MyEntityAPIController::create().'));
    }

    $bundle = $values[$this->entityInfo['entity keys']['bundle']];
      // Add is_new property if it is not set.
    $values += array(
      'is_new' => TRUE,
    );

    $default_class = isset($this->entityInfo['entity class']) ? $this->entityInfo['entity class'] : NULL;
    $class = isset($this->entityInfo['bundles'][$bundle]['entity class']) ? $this->entityInfo['bundles'][$bundle]['entity class'] : $default_class;
    if (!class_exists($class)) {
      $class = "Entity";
    }

    return new $class($values, $this->entityType);
  }

}

class Question extends Entity {
  /**
   * Override this in order to implement a custom default URI.
   */
  protected function defaultUri() {
    return array('path' => 'question/' . $this->identifier());
  }
}
